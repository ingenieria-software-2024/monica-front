// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model VariantCategory {
  id Int @id @default(autoincrement())
  name String
  description String?
  ProductVariant ProductVariant[] 
  products Product[] @relation("ProductVariantCategories") 
}

model ProductVariant {
  id Int @id @default(autoincrement())
  name String 
  description String?
  stock Int
  stockMin Int
  productId Int
  variantCategoryId Int // Referencia a la categoría de variante
  product Product @relation(fields: [productId], references: [id])
  variantCategory VariantCategory @relation(fields: [variantCategoryId], references: [id])
}

model Category {
  id Int @id @default(autoincrement())
  name String
  description String?
  SubCategory SubCategory[]
  Product Product[]
}

model SubCategory {
  id Int @id @default(autoincrement())
  name String
  description String?
  category Category @relation(fields: [id], references: [id])
  Product Product[]
}

model Product {
  id Int @id @default(autoincrement())
  name String
  description String?
  price Float
  imageUrl String
  categoryId Int?
  category Category? @relation(fields: [categoryId], references: [id])
  subCategoryId Int?
  subCategory SubCategory? @relation(fields: [subCategoryId], references: [id])
  variantCategories VariantCategory[] @relation("ProductVariantCategories") 
  ProductVariant ProductVariant[]
  HistoricProduct HistoricProduct[]
}

// Esta entidad sirve como auditora para los productos creados y sus modificaciones de precio en algún momento dado.
model HistoricProduct {
  id Int @id @default(autoincrement())
  productId Int
  product Product @relation(fields: [productId], references: [id])
  price Float
  createdAt DateTime @default(now())
  modifiedBy String?
}
model User {
  id          Int           @id @default(autoincrement())
  username    String        @unique
  email       String        @unique
  password    String
}